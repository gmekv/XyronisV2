export declare const copyValue: <T>(src: T) => T;
export declare const cloneValue: <T>(src: T) => T;
export declare const copyArray: <T>(src: T[], dest?: T[] | undefined) => T[];
export declare const cloneArray: <T>(src: T[]) => T[];
export declare const copyJSON: <T>(src: T) => T;
export declare const cloneJSON: <T>(src: T) => T;
interface CopyableClonable<T> {
    copy: (src: T) => T;
    clone: () => T;
}
export declare const copyCopyable: <T extends CopyableClonable<T>>(src: T, dest?: T | undefined) => T;
export declare const cloneClonable: <T extends CopyableClonable<T>>(src: T) => T | undefined;
export interface TypeDefinition<T> {
    name: string;
    default: T;
    copy: (src: T, dest?: T) => T;
    clone: (src: T) => T;
    isType?: boolean;
}
export declare function createType<T>(typeDefinition: TypeDefinition<T>): TypeDefinition<T>;
export declare const Types: {
    Number: TypeDefinition<number>;
    Boolean: TypeDefinition<boolean>;
    String: TypeDefinition<string>;
    Array: TypeDefinition<never[]>;
    Ref: TypeDefinition<undefined>;
    JSON: TypeDefinition<null>;
};
export {};
//# sourceMappingURL=Types.d.ts.map