var _a;
export const PRIVATE = Symbol('@elics/system');
export class System {
    constructor(world, queryManager, priority = 0) {
        this[_a] = {
            world: null,
            queryManager: null,
            isPaused: false,
            priority: 0,
            queries: {},
        };
        this[PRIVATE].world = world;
        this[PRIVATE].queryManager = queryManager;
        this[PRIVATE].priority = priority;
    }
    get world() {
        return this[PRIVATE].world;
    }
    get isPaused() {
        return this[PRIVATE].isPaused;
    }
    get queries() {
        return this[PRIVATE].queries;
    }
    get priority() {
        return this[PRIVATE].priority;
    }
    getEntities(query) {
        return this[PRIVATE].queryManager.getEntities(query);
    }
    init() {
        // Override in derived systems
    }
    update(_delta, _time) {
        // Override in derived systems
    }
    play() {
        this[PRIVATE].isPaused = false;
    }
    stop() {
        this[PRIVATE].isPaused = true;
    }
}
_a = PRIVATE;
System.isSystem = true;
System.queries = {};
//# sourceMappingURL=System.js.map