// Types.ts
// Copy and clone functions for basic value types
export const copyValue = (src) => src;
export const cloneValue = (src) => src;
// Copy and clone functions for arrays
export const copyArray = (src, dest) => {
    if (!src) {
        return src;
    }
    if (!dest) {
        return [...src];
    }
    dest.length = 0;
    src.forEach((item) => dest.push(item));
    return dest;
};
export const cloneArray = (src) => {
    return [...src];
};
// Copy and clone functions for JSON objects
export const copyJSON = (src) => JSON.parse(JSON.stringify(src));
export const cloneJSON = (src) => JSON.parse(JSON.stringify(src));
// Copy and clone functions for copyable and clonable objects
export const copyCopyable = (src, dest) => {
    if (!src) {
        return src;
    }
    if (!dest) {
        return src.clone();
    }
    return dest.copy(src);
};
export const cloneClonable = (src) => src && src.clone();
// Function to create a new type definition
export function createType(typeDefinition) {
    const mandatoryProperties = [
        'name',
        'default',
        'copy',
        'clone',
    ];
    const undefinedProperties = mandatoryProperties.filter((p) => !typeDefinition.hasOwnProperty(p));
    if (undefinedProperties.length > 0) {
        throw new Error(`createType expects a type definition with the following properties: ${undefinedProperties.join(', ')}`);
    }
    typeDefinition.isType = true;
    return typeDefinition;
}
// Standard types
export const Types = {
    Number: createType({
        name: 'Number',
        default: 0,
        copy: copyValue,
        clone: cloneValue,
    }),
    Boolean: createType({
        name: 'Boolean',
        default: false,
        copy: copyValue,
        clone: cloneValue,
    }),
    String: createType({
        name: 'String',
        default: '',
        copy: copyValue,
        clone: cloneValue,
    }),
    Array: createType({
        name: 'Array',
        default: [],
        copy: copyArray,
        clone: cloneArray,
    }),
    Ref: createType({
        name: 'Ref',
        default: undefined,
        copy: copyValue,
        clone: cloneValue,
    }),
    JSON: createType({
        name: 'JSON',
        default: null,
        copy: copyJSON,
        clone: cloneJSON,
    }),
};
//# sourceMappingURL=Types.js.map