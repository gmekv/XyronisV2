import { Component, ComponentMask } from './Component.js';
import { World } from './World.js';
import { ComponentManager } from './ComponentManager.js';
import { EntityManager } from './EntityManager.js';
import { QueryManager } from './QueryManager.js';
export interface EntityLike {
    componentMask: ComponentMask;
    active: boolean;
    addComponent<T extends typeof Component>(componentClass: T, initialData?: {
        [key: string]: any;
    }): Component | null;
    removeComponent<T extends typeof Component>(componentClass: T): void;
    hasComponent<T extends typeof Component>(componentClass: T): boolean;
    getComponent<T extends Component>(componentClass: {
        new (_cm: ComponentManager, _mi: number): T;
        bitmask: ComponentMask;
        defaults: {
            [key: string]: any;
        };
    }): T | null;
    getComponentTypes(): (typeof Component)[];
    destroy(): void;
}
export declare class Entity implements EntityLike {
    componentMask: ComponentMask;
    active: boolean;
    protected components: Map<typeof Component, Component>;
    protected entityManager: EntityManager;
    protected queryManager: QueryManager;
    protected componentManager: ComponentManager;
    constructor(world: World);
    addComponent<T extends typeof Component>(componentClass: T, initialData?: {
        [key: string]: any;
    }): Component;
    removeComponent<T extends typeof Component>(componentClass: T): void;
    hasComponent<T extends typeof Component>(componentClass: T): boolean;
    getComponent<T extends Component>(componentClass: {
        new (_cm: ComponentManager, _mi: number): T;
        bitmask: ComponentMask;
        defaults: {
            [key: string]: any;
        };
    }): T | null;
    getComponentTypes(): (typeof Component)[];
    destroy(): void;
}
//# sourceMappingURL=Entity.d.ts.map