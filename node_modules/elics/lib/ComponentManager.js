var _a;
import { PRIVATE as COMPONENT_PRIVATE } from './Component.js';
export const PRIVATE = Symbol('@elics/component-manager');
export class ComponentManager {
    constructor() {
        this[_a] = {
            componentPools: new Map(),
            freeInstances: new Map(),
        };
    }
    registerComponent(ComponentClass) {
        this[PRIVATE].componentPools.set(ComponentClass.bitmask, []);
        this[PRIVATE].freeInstances.set(ComponentClass.bitmask, []);
    }
    requestComponentInstance(ComponentClass, initialData = {}) {
        const pool = this[PRIVATE].componentPools.get(ComponentClass.bitmask);
        const free = this[PRIVATE].freeInstances.get(ComponentClass.bitmask);
        if (!pool || !free) {
            throw new Error('Component class not registered');
        }
        // If there are free instances, use one
        if (free.length > 0) {
            const index = free.pop();
            const instance = pool[index];
            Object.assign(instance, ComponentClass.defaults);
            Object.assign(instance, initialData);
            return instance;
        }
        else {
            const newInstance = new ComponentClass(this, pool.length, initialData);
            pool.push(newInstance);
            return newInstance;
        }
    }
    releaseComponentInstance(componentInstance) {
        const ComponentClass = componentInstance.constructor;
        const pool = this[PRIVATE].componentPools.get(ComponentClass.bitmask);
        const free = this[PRIVATE].freeInstances.get(ComponentClass.bitmask);
        if (!pool || !free) {
            throw new Error('Component class not registered');
        }
        // Reset the component
        componentInstance.reset();
        // Add the index back to the free queue
        free.push(componentInstance[COMPONENT_PRIVATE].index);
    }
}
_a = PRIVATE;
//# sourceMappingURL=ComponentManager.js.map