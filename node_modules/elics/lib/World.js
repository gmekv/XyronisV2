var _a;
import { Entity } from './Entity.js';
import { Query } from './Query.js';
import { PRIVATE as SYSTEM_PRIVATE } from './System.js';
import { ComponentManager } from './ComponentManager.js';
import { EntityManager } from './EntityManager.js';
import { QueryManager } from './QueryManager.js';
export const PRIVATE = Symbol('@elics/world');
export class World {
    constructor() {
        this[_a] = {
            entityManager: new EntityManager(this),
            queryManager: new QueryManager(),
            componentManager: new ComponentManager(),
            nextComponentTypeId: 0,
            systems: [],
            entityPrototype: Entity,
        };
    }
    setEntityPrototype(prototype) {
        this[PRIVATE].entityPrototype = prototype;
    }
    registerComponent(componentClass) {
        const typeId = 1 << this[PRIVATE].nextComponentTypeId;
        this[PRIVATE].nextComponentTypeId++;
        if (this[PRIVATE].nextComponentTypeId >= 32) {
            throw new Error('Exceeded the maximum number of unique components');
        }
        componentClass.bitmask = typeId;
        this[PRIVATE].componentManager.registerComponent(componentClass);
        return this;
    }
    createEntity() {
        return this[PRIVATE].entityManager.requestEntityInstance();
    }
    registerSystem(systemClass, priority) {
        if (this[PRIVATE].systems.some((system) => system instanceof systemClass)) {
            throw new Error('System already registered');
        }
        const systemInstance = new systemClass(this, this[PRIVATE].queryManager, priority);
        Object.entries(systemClass.queries).forEach(([queryName, queryConfig]) => {
            const query = new Query(queryConfig);
            this[PRIVATE].queryManager.registerQuery(query);
            systemInstance[SYSTEM_PRIVATE].queries[queryName] = query;
        });
        systemInstance.init();
        // Determine the correct position for the new system based on priority
        const insertIndex = this[PRIVATE].systems.findIndex((s) => s[SYSTEM_PRIVATE].priority > systemInstance[SYSTEM_PRIVATE].priority);
        if (insertIndex === -1) {
            this[PRIVATE].systems.push(systemInstance);
        }
        else {
            this[PRIVATE].systems.splice(insertIndex, 0, systemInstance);
        }
        return this;
    }
    unregisterSystem(systemClass) {
        this[PRIVATE].systems = this[PRIVATE].systems.filter((system) => !(system instanceof systemClass));
    }
    registerQuery(queryConfig) {
        const query = new Query(queryConfig);
        this[PRIVATE].queryManager.registerQuery(query);
        return this;
    }
    update(delta, time) {
        this[PRIVATE].systems.forEach((system) => {
            if (!system[SYSTEM_PRIVATE].isPaused) {
                system.update(delta, time);
            }
        });
    }
    getSystem(systemClass) {
        for (const system of this[PRIVATE].systems) {
            if (system instanceof systemClass) {
                return system;
            }
        }
        return undefined;
    }
    getSystems() {
        return [...this[PRIVATE].systems];
    }
}
_a = PRIVATE;
//# sourceMappingURL=World.js.map