import { EntityLike } from './Entity.js';
import { QueryConfig } from './Query.js';
import { System } from './System.js';
import { Component } from './Component.js';
import { ComponentManager } from './ComponentManager.js';
import { EntityManager } from './EntityManager.js';
import { QueryManager } from './QueryManager.js';
export declare const PRIVATE: unique symbol;
export declare class World {
    [PRIVATE]: {
        entityManager: EntityManager;
        queryManager: QueryManager;
        componentManager: ComponentManager;
        nextComponentTypeId: number;
        systems: System[];
        entityPrototype: new (world: World) => EntityLike;
    };
    setEntityPrototype(prototype: new (world: World) => EntityLike): void;
    registerComponent<T extends typeof Component>(componentClass: T): World;
    createEntity(): EntityLike;
    registerSystem(systemClass: typeof System, priority?: number): World;
    unregisterSystem(systemClass: typeof System): void;
    registerQuery(queryConfig: QueryConfig): World;
    update(delta: number, time: number): void;
    getSystem<T extends System>(systemClass: new (...args: any[]) => T): T | undefined;
    getSystems(): System[];
}
//# sourceMappingURL=World.d.ts.map