import { PRIVATE as WORLD_PRIVATE } from './World.js';
const ERRORS = {
    MODIFY_DESTROYED_ENTITY: 'Cannot modify a destroyed entity',
    ACCESS_DESTROYED_ENTITY: 'Cannot access a destroyed entity',
};
export class Entity {
    constructor(world) {
        this.componentMask = 0;
        this.active = true;
        this.components = new Map();
        this.entityManager = world[WORLD_PRIVATE].entityManager;
        this.queryManager = world[WORLD_PRIVATE].queryManager;
        this.componentManager = world[WORLD_PRIVATE].componentManager;
    }
    addComponent(componentClass, initialData = {}) {
        if (!this.active)
            throw new Error(ERRORS.MODIFY_DESTROYED_ENTITY);
        if (componentClass.bitmask !== null) {
            this.componentMask |= componentClass.bitmask;
            const componentInstance = this.componentManager.requestComponentInstance(componentClass, initialData);
            this.components.set(componentClass, componentInstance);
            this.queryManager.updateEntity(this);
            return componentInstance;
        }
        else {
            throw new Error('Component type not registered');
        }
    }
    removeComponent(componentClass) {
        if (!this.active)
            throw new Error(ERRORS.MODIFY_DESTROYED_ENTITY);
        if (componentClass.bitmask !== null &&
            this.components.has(componentClass)) {
            const componentInstance = this.components.get(componentClass);
            this.componentManager.releaseComponentInstance(componentInstance);
            this.componentMask &= ~componentClass.bitmask;
            this.components.delete(componentClass);
            this.queryManager.updateEntity(this);
        }
        else {
            throw new Error('Component not found');
        }
    }
    hasComponent(componentClass) {
        if (!this.active)
            throw new Error(ERRORS.ACCESS_DESTROYED_ENTITY);
        return this.components.has(componentClass);
    }
    getComponent(componentClass) {
        if (!this.active)
            throw new Error(ERRORS.ACCESS_DESTROYED_ENTITY);
        const component = this.components.get(componentClass);
        if (!component)
            return null;
        return component;
    }
    getComponentTypes() {
        if (!this.active)
            throw new Error(ERRORS.ACCESS_DESTROYED_ENTITY);
        return Array.from(this.components.keys());
    }
    destroy() {
        if (!this.active)
            throw new Error(ERRORS.MODIFY_DESTROYED_ENTITY);
        this.entityManager.releaseEntityInstance(this);
        // Mark the entity as inactive
        this.active = false;
        // Clear the components map and reset the component mask
        this.components.forEach((component) => {
            this.componentManager.releaseComponentInstance(component);
        });
        this.components.clear();
        this.componentMask = 0;
        this.queryManager.updateEntity(this);
    }
}
//# sourceMappingURL=Entity.js.map