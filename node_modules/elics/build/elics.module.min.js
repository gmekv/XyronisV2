var t;const e=Symbol("@elics/query");class s{constructor({required:n,excluded:r=[]}){this[t]={requiredComponents:new Set,excludedComponents:new Set,queryId:""},this[e].requiredComponents=new Set(n.map((t=>t.bitmask||0))),this[e].excludedComponents=new Set(r.map((t=>t.bitmask||0))),this[e].queryId=s.generateQueryId(this[e].requiredComponents,this[e].excludedComponents)}static generateQueryId(t,e){return`required:${Array.from(t).reduce(((t,e)=>t|e),0)}|excluded:${Array.from(e).reduce(((t,e)=>t|e),0)}`}static matchesQuery(t,e){const[s,n]=t.split("|"),r=parseInt(s.split(":")[1]),o=parseInt(n.split(":")[1]);return(e&r)===r&&(0===o||(e&o)!==o)}get queryId(){return this[e].queryId}}var n;t=e;const r=Symbol("@elics/system");class o{constructor(t,e,s=0){this[n]={world:null,queryManager:null,isPaused:!1,priority:0,queries:{}},this[r].world=t,this[r].queryManager=e,this[r].priority=s}get world(){return this[r].world}get isPaused(){return this[r].isPaused}get queries(){return this[r].queries}get priority(){return this[r].priority}getEntities(t){return this[r].queryManager.getEntities(t)}init(){}update(t,e){}play(){this[r].isPaused=!1}stop(){this[r].isPaused=!0}}var i;n=r,o.isSystem=!0,o.queries={};const a=Symbol("@elics/component");class c{reset(){}constructor(t,e,s={}){this[i]={componentManager:null,index:null},this[a].componentManager=t,this[a].index=e,Object.assign(this,this.constructor.defaults),Object.assign(this,s)}}var h;i=a,c.bitmask=null,c.defaults={};const u=Symbol("@elics/component-manager");class m{constructor(){this[h]={componentPools:new Map,freeInstances:new Map}}registerComponent(t){this[u].componentPools.set(t.bitmask,[]),this[u].freeInstances.set(t.bitmask,[])}requestComponentInstance(t,e={}){const s=this[u].componentPools.get(t.bitmask),n=this[u].freeInstances.get(t.bitmask);if(!s||!n)throw new Error("Component class not registered");if(n.length>0){const r=s[n.pop()];return Object.assign(r,t.defaults),Object.assign(r,e),r}{const n=new t(this,s.length,e);return s.push(n),n}}releaseComponentInstance(t){const e=t.constructor,s=this[u].componentPools.get(e.bitmask),n=this[u].freeInstances.get(e.bitmask);if(!s||!n)throw new Error("Component class not registered");t.reset(),n.push(t[a].index)}}var p;h=u;const y=Symbol("@elics/entity-manager");class l{constructor(t){this[p]={world:null,pool:[]},this[y].world=t}requestEntityInstance(){let t;if(this[y].pool.length>0)t=this[y].pool.pop(),t.active=!0;else{t=new(0,this[y].world[f].entityPrototype)(this[y].world)}return t}releaseEntityInstance(t){this[y].pool.push(t)}}var d;p=y;const g=Symbol("@elics/query-manager");class w{constructor(){this[d]={queries:new Map}}registerQuery(t){const e=t.queryId;this[g].queries.has(e)||this[g].queries.set(e,new Set)}updateEntity(t){0!==t.componentMask?this[g].queries.forEach(((e,n)=>{const r=s.matchesQuery(n,t.componentMask),o=e.has(t);r&&!o?e.add(t):!r&&o&&e.delete(t)})):this[g].queries.forEach((e=>e.delete(t)))}getEntities(t){const e=t.queryId;if(!this[g].queries.has(e))throw new Error(`Query not registered: ${e}`);return Array.from(this[g].queries.get(e)||[])}}var q;d=g;const f=Symbol("@elics/world");class M{constructor(){this[q]={entityManager:new l(this),queryManager:new w,componentManager:new m,nextComponentTypeId:0,systems:[],entityPrototype:I}}setEntityPrototype(t){this[f].entityPrototype=t}registerComponent(t){const e=1<<this[f].nextComponentTypeId;if(this[f].nextComponentTypeId++,this[f].nextComponentTypeId>=32)throw new Error("Exceeded the maximum number of unique components");return t.bitmask=e,this[f].componentManager.registerComponent(t),this}createEntity(){return this[f].entityManager.requestEntityInstance()}registerSystem(t,e){if(this[f].systems.some((e=>e instanceof t)))throw new Error("System already registered");const n=new t(this,this[f].queryManager,e);Object.entries(t.queries).forEach((([t,e])=>{const o=new s(e);this[f].queryManager.registerQuery(o),n[r].queries[t]=o})),n.init();const o=this[f].systems.findIndex((t=>t[r].priority>n[r].priority));return-1===o?this[f].systems.push(n):this[f].systems.splice(o,0,n),this}unregisterSystem(t){this[f].systems=this[f].systems.filter((e=>!(e instanceof t)))}registerQuery(t){const e=new s(t);return this[f].queryManager.registerQuery(e),this}update(t,e){this[f].systems.forEach((s=>{s[r].isPaused||s.update(t,e)}))}getSystem(t){for(const e of this[f].systems)if(e instanceof t)return e}getSystems(){return[...this[f].systems]}}q=f;const E="Cannot modify a destroyed entity",C="Cannot access a destroyed entity";class I{constructor(t){this.componentMask=0,this.active=!0,this.components=new Map,this.entityManager=t[f].entityManager,this.queryManager=t[f].queryManager,this.componentManager=t[f].componentManager}addComponent(t,e={}){if(!this.active)throw new Error(E);if(null!==t.bitmask){this.componentMask|=t.bitmask;const s=this.componentManager.requestComponentInstance(t,e);return this.components.set(t,s),this.queryManager.updateEntity(this),s}throw new Error("Component type not registered")}removeComponent(t){if(!this.active)throw new Error(E);if(null===t.bitmask||!this.components.has(t))throw new Error("Component not found");{const e=this.components.get(t);this.componentManager.releaseComponentInstance(e),this.componentMask&=~t.bitmask,this.components.delete(t),this.queryManager.updateEntity(this)}}hasComponent(t){if(!this.active)throw new Error(C);return this.components.has(t)}getComponent(t){if(!this.active)throw new Error(C);const e=this.components.get(t);return e||null}getComponentTypes(){if(!this.active)throw new Error(C);return Array.from(this.components.keys())}destroy(){if(!this.active)throw new Error(E);this.entityManager.releaseEntityInstance(this),this.active=!1,this.components.forEach((t=>{this.componentManager.releaseComponentInstance(t)})),this.components.clear(),this.componentMask=0,this.queryManager.updateEntity(this)}}export{c as Component,I as Entity,s as Query,o as System,M as World};
