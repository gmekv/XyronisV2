import { ImageProperties, createImage } from '../components/image.js';
import { AllOptionalProperties } from '../properties/default.js';
import { Parent } from './utils.js';
import { Signal } from '@preact/signals-core';
export declare class Image<T = {}> extends Parent<T> {
    private mergedProperties?;
    private readonly styleSignal;
    private readonly propertiesSignal;
    private readonly defaultPropertiesSignal;
    protected readonly parentContextSignal: Signal<Signal<(Readonly<{
        node: Signal<import("../internals.js").FlexNode | undefined>;
        anyAncestorScrollable: Signal<readonly [boolean, boolean]>;
        clippingRect: Signal<import("../clipping.js").ClippingRect | undefined>;
        childrenMatrix: Signal<import("three").Matrix4 | undefined>;
        orderInfo: Signal<import("../order.js").OrderInfo | undefined>;
        root: import("../context.js").RootContext;
    }> & {
        fontFamiliesSignal: Signal<import("../internals.js").FontFamilies | undefined>;
    }) | undefined> | undefined>;
    private readonly unsubscribe;
    internals: ReturnType<typeof createImage>;
    constructor(properties?: ImageProperties, defaultProperties?: AllOptionalProperties);
    getComputedProperty<K extends keyof ImageProperties>(key: K): ImageProperties[K] | undefined;
    getStyle(): undefined | Readonly<ImageProperties>;
    setStyle(style: ImageProperties | undefined, replace?: boolean): void;
    setProperties(properties: ImageProperties | undefined): void;
    setDefaultProperties(properties: AllOptionalProperties): void;
    destroy(): void;
}
